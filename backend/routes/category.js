const express = require("express");
const router = express.Router();
const Category = require("../models/categories");

// üìå GET all categories
router.get("/", async (req, res) => {
  try {
    const categories = await Category.find().populate("parentCategory"); // ƒê·∫£m b·∫£o r·∫±ng `parentCategory` ƒë∆∞·ª£c populate ƒë·ªÉ l·∫•y th√¥ng tin
    res.json(categories);
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err });
  }
});


// ‚úÖ POST - Create a new category
router.post("/add", async (req, res) => {
  const { name, category_id } = req.body;

  if (!name) {
    return res.status(400).json({ message: "Thi·∫øu t√™n danh m·ª•c!" });
  }

  try {
    const newCategory = new Category({
      cat_name: name,
      parentCategory: category_id || null,
    });
    const savedCategory = await newCategory.save();
    res.status(201).json(savedCategory);
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi t·∫°o category", error: err });
  }
});

// ‚úèÔ∏è PUT - Update category by ID
router.put("/:id", async (req, res) => {
  const { id } = req.params;
  const { cat_name, parentCategory } = req.body;

  try {
    const updatedCategory = await Category.findByIdAndUpdate(
      id,
      { cat_name, parentCategory },
      { new: true }
    );

    if (!updatedCategory) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y category!" });
    }

    res.json(updatedCategory);
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t category", error: err });
  }
});

// üóëÔ∏è DELETE - Remove category by ID
router.delete("/:id", async (req, res) => {
  const { id } = req.params;

  try {
    const deletedCategory = await Category.findByIdAndDelete(id);
    if (!deletedCategory) {
      return res.status(404).json({ message: "Category kh√¥ng t·ªìn t·∫°i!" });
    }

    res.json({ message: "ƒê√£ xo√° category", deletedCategory });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi xo√° category", error: err });
  }
});

module.exports = router;
